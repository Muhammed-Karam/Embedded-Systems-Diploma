
Button driver and control led using button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000512  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000512  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000707  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d5  00000000  00000000  000014c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b4  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000230  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000516  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Button.h"
#include "LED.h"

int main(void)
{
	button_vInit('D',0);
  92:	84 e4       	ldi	r24, 0x44	; 68
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	0e 94 61 00 	call	0xc2	; 0xc2 <button_vInit>
	LED_vInit('D',1);
  9a:	84 e4       	ldi	r24, 0x44	; 68
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	0e 94 75 02 	call	0x4ea	; 0x4ea <LED_vInit>
    while(1)
    {
         if(button_u8read('D',0) == 1)
  a2:	84 e4       	ldi	r24, 0x44	; 68
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	0e 94 65 00 	call	0xca	; 0xca <button_u8read>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	29 f4       	brne	.+10     	; 0xb8 <main+0x26>
		 {
			 LED_vTurnOn('D',1);
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LED_vTurnOn>
  b6:	f5 cf       	rjmp	.-22     	; 0xa2 <main+0x10>
		 }
		 else
		 {
			 LED_vTurnOff('D',1);
  b8:	84 e4       	ldi	r24, 0x44	; 68
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LED_vTurnOff>
  c0:	f0 cf       	rjmp	.-32     	; 0xa2 <main+0x10>

000000c2 <button_vInit>:

#include "DIO.h"

void button_vInit(unsigned char portName, unsigned char pinNumber)
{
	DIO_vsetPinDirection(portName,pinNumber,0);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPinDirection>
}
  c8:	08 95       	ret

000000ca <button_u8read>:

unsigned char button_u8read(unsigned char portName, unsigned char pinNumber)
{
	return DIO_u8readPin(portName,pinNumber);
  ca:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_u8readPin>
  ce:	08 95       	ret

000000d0 <DIO_vsetPinDirection>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_vsetPinDirection(unsigned char portName, unsigned char pinNumber, unsigned char pinDirection)
{
	switch(portName)
  d0:	83 34       	cpi	r24, 0x43	; 67
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_vsetPinDirection+0x6>
  d4:	4a c0       	rjmp	.+148    	; 0x16a <DIO_vsetPinDirection+0x9a>
  d6:	84 34       	cpi	r24, 0x44	; 68
  d8:	30 f4       	brcc	.+12     	; 0xe6 <DIO_vsetPinDirection+0x16>
  da:	81 34       	cpi	r24, 0x41	; 65
  dc:	61 f0       	breq	.+24     	; 0xf6 <DIO_vsetPinDirection+0x26>
  de:	82 34       	cpi	r24, 0x42	; 66
  e0:	09 f0       	breq	.+2      	; 0xe4 <DIO_vsetPinDirection+0x14>
  e2:	60 c0       	rjmp	.+192    	; 0x1a4 <DIO_vsetPinDirection+0xd4>
  e4:	25 c0       	rjmp	.+74     	; 0x130 <DIO_vsetPinDirection+0x60>
  e6:	82 36       	cpi	r24, 0x62	; 98
  e8:	19 f1       	breq	.+70     	; 0x130 <DIO_vsetPinDirection+0x60>
  ea:	83 36       	cpi	r24, 0x63	; 99
  ec:	09 f4       	brne	.+2      	; 0xf0 <DIO_vsetPinDirection+0x20>
  ee:	3d c0       	rjmp	.+122    	; 0x16a <DIO_vsetPinDirection+0x9a>
  f0:	81 36       	cpi	r24, 0x61	; 97
  f2:	09 f0       	breq	.+2      	; 0xf6 <DIO_vsetPinDirection+0x26>
  f4:	57 c0       	rjmp	.+174    	; 0x1a4 <DIO_vsetPinDirection+0xd4>
	{
		case 'A':
		case 'a':
		if(pinDirection == 0)
  f6:	44 23       	and	r20, r20
  f8:	71 f4       	brne	.+28     	; 0x116 <DIO_vsetPinDirection+0x46>
		{
			CLR_BIT(DDRA,pinNumber);
  fa:	2a b3       	in	r18, 0x1a	; 26
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	ac 01       	movw	r20, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_vsetPinDirection+0x38>
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_vsetPinDirection+0x34>
 10c:	ba 01       	movw	r22, r20
 10e:	60 95       	com	r22
 110:	62 23       	and	r22, r18
 112:	6a bb       	out	0x1a, r22	; 26
 114:	08 95       	ret
		}
		else
		{
			SET_BIT(DDRA,pinNumber);
 116:	2a b3       	in	r18, 0x1a	; 26
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	ac 01       	movw	r20, r24
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_vsetPinDirection+0x54>
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_vsetPinDirection+0x50>
 128:	ba 01       	movw	r22, r20
 12a:	62 2b       	or	r22, r18
 12c:	6a bb       	out	0x1a, r22	; 26
 12e:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if(pinDirection == 0)
 130:	44 23       	and	r20, r20
 132:	71 f4       	brne	.+28     	; 0x150 <DIO_vsetPinDirection+0x80>
		{
			CLR_BIT(DDRB,pinNumber);
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	ac 01       	movw	r20, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_vsetPinDirection+0x72>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_vsetPinDirection+0x6e>
 146:	ba 01       	movw	r22, r20
 148:	60 95       	com	r22
 14a:	62 23       	and	r22, r18
 14c:	67 bb       	out	0x17, r22	; 23
 14e:	08 95       	ret
		}
		else
		{
			SET_BIT(DDRB,pinNumber);
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ac 01       	movw	r20, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_vsetPinDirection+0x8e>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_vsetPinDirection+0x8a>
 162:	ba 01       	movw	r22, r20
 164:	62 2b       	or	r22, r18
 166:	67 bb       	out	0x17, r22	; 23
 168:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if(pinDirection == 0)
 16a:	44 23       	and	r20, r20
 16c:	71 f4       	brne	.+28     	; 0x18a <DIO_vsetPinDirection+0xba>
		{
			CLR_BIT(DDRC,pinNumber);
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ac 01       	movw	r20, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_vsetPinDirection+0xac>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_vsetPinDirection+0xa8>
 180:	ba 01       	movw	r22, r20
 182:	60 95       	com	r22
 184:	62 23       	and	r22, r18
 186:	64 bb       	out	0x14, r22	; 20
 188:	08 95       	ret
		}
		else
		{
			SET_BIT(DDRC,pinNumber);
 18a:	24 b3       	in	r18, 0x14	; 20
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	ac 01       	movw	r20, r24
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vsetPinDirection+0xc8>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vsetPinDirection+0xc4>
 19c:	ba 01       	movw	r22, r20
 19e:	62 2b       	or	r22, r18
 1a0:	64 bb       	out	0x14, r22	; 20
 1a2:	08 95       	ret
		}
		break;
		
		default:
		if(pinDirection == 0)
 1a4:	44 23       	and	r20, r20
 1a6:	71 f4       	brne	.+28     	; 0x1c4 <DIO_vsetPinDirection+0xf4>
		{
			CLR_BIT(DDRD,pinNumber);
 1a8:	21 b3       	in	r18, 0x11	; 17
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_vsetPinDirection+0xe6>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_vsetPinDirection+0xe2>
 1ba:	ba 01       	movw	r22, r20
 1bc:	60 95       	com	r22
 1be:	62 23       	and	r22, r18
 1c0:	61 bb       	out	0x11, r22	; 17
 1c2:	08 95       	ret
		}
		else
		{
			SET_BIT(DDRD,pinNumber);
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	ac 01       	movw	r20, r24
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_vsetPinDirection+0x102>
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_vsetPinDirection+0xfe>
 1d6:	ba 01       	movw	r22, r20
 1d8:	62 2b       	or	r22, r18
 1da:	61 bb       	out	0x11, r22	; 17
 1dc:	08 95       	ret

000001de <DIO_vwritePin>:
	}
}

void DIO_vwritePin(unsigned char portName, unsigned char pinNumber, unsigned char pinValue)
{
	switch(portName)
 1de:	83 34       	cpi	r24, 0x43	; 67
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <DIO_vwritePin+0x6>
 1e2:	4a c0       	rjmp	.+148    	; 0x278 <DIO_vwritePin+0x9a>
 1e4:	84 34       	cpi	r24, 0x44	; 68
 1e6:	30 f4       	brcc	.+12     	; 0x1f4 <DIO_vwritePin+0x16>
 1e8:	81 34       	cpi	r24, 0x41	; 65
 1ea:	61 f0       	breq	.+24     	; 0x204 <DIO_vwritePin+0x26>
 1ec:	82 34       	cpi	r24, 0x42	; 66
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_vwritePin+0x14>
 1f0:	60 c0       	rjmp	.+192    	; 0x2b2 <DIO_vwritePin+0xd4>
 1f2:	25 c0       	rjmp	.+74     	; 0x23e <DIO_vwritePin+0x60>
 1f4:	82 36       	cpi	r24, 0x62	; 98
 1f6:	19 f1       	breq	.+70     	; 0x23e <DIO_vwritePin+0x60>
 1f8:	83 36       	cpi	r24, 0x63	; 99
 1fa:	09 f4       	brne	.+2      	; 0x1fe <DIO_vwritePin+0x20>
 1fc:	3d c0       	rjmp	.+122    	; 0x278 <DIO_vwritePin+0x9a>
 1fe:	81 36       	cpi	r24, 0x61	; 97
 200:	09 f0       	breq	.+2      	; 0x204 <DIO_vwritePin+0x26>
 202:	57 c0       	rjmp	.+174    	; 0x2b2 <DIO_vwritePin+0xd4>
	{
		case 'A':
		case 'a':
		if(pinValue == 0)
 204:	44 23       	and	r20, r20
 206:	71 f4       	brne	.+28     	; 0x224 <DIO_vwritePin+0x46>
		{
			CLR_BIT(PORTA,pinNumber);
 208:	2b b3       	in	r18, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	ac 01       	movw	r20, r24
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_vwritePin+0x38>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_vwritePin+0x34>
 21a:	ba 01       	movw	r22, r20
 21c:	60 95       	com	r22
 21e:	62 23       	and	r22, r18
 220:	6b bb       	out	0x1b, r22	; 27
 222:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTA,pinNumber);
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	ac 01       	movw	r20, r24
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_vwritePin+0x54>
 22e:	44 0f       	add	r20, r20
 230:	55 1f       	adc	r21, r21
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_vwritePin+0x50>
 236:	ba 01       	movw	r22, r20
 238:	62 2b       	or	r22, r18
 23a:	6b bb       	out	0x1b, r22	; 27
 23c:	08 95       	ret
		}
		break;

		case 'B':
		case 'b':
		if(pinValue == 0)
 23e:	44 23       	and	r20, r20
 240:	71 f4       	brne	.+28     	; 0x25e <DIO_vwritePin+0x80>
		{
			CLR_BIT(PORTB,pinNumber);
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	ac 01       	movw	r20, r24
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_vwritePin+0x72>
 24c:	44 0f       	add	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_vwritePin+0x6e>
 254:	ba 01       	movw	r22, r20
 256:	60 95       	com	r22
 258:	62 23       	and	r22, r18
 25a:	68 bb       	out	0x18, r22	; 24
 25c:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTB,pinNumber);
 25e:	28 b3       	in	r18, 0x18	; 24
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	ac 01       	movw	r20, r24
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_vwritePin+0x8e>
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_vwritePin+0x8a>
 270:	ba 01       	movw	r22, r20
 272:	62 2b       	or	r22, r18
 274:	68 bb       	out	0x18, r22	; 24
 276:	08 95       	ret
		}
		break;

		case 'C':
		case 'c':
		if(pinValue == 0)
 278:	44 23       	and	r20, r20
 27a:	71 f4       	brne	.+28     	; 0x298 <DIO_vwritePin+0xba>
		{
			CLR_BIT(PORTC,pinNumber);
 27c:	25 b3       	in	r18, 0x15	; 21
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	ac 01       	movw	r20, r24
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_vwritePin+0xac>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_vwritePin+0xa8>
 28e:	ba 01       	movw	r22, r20
 290:	60 95       	com	r22
 292:	62 23       	and	r22, r18
 294:	65 bb       	out	0x15, r22	; 21
 296:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTC,pinNumber);
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	ac 01       	movw	r20, r24
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_vwritePin+0xc8>
 2a2:	44 0f       	add	r20, r20
 2a4:	55 1f       	adc	r21, r21
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_vwritePin+0xc4>
 2aa:	ba 01       	movw	r22, r20
 2ac:	62 2b       	or	r22, r18
 2ae:	65 bb       	out	0x15, r22	; 21
 2b0:	08 95       	ret
		}
		break;

		default:
		if(pinValue == 0)
 2b2:	44 23       	and	r20, r20
 2b4:	71 f4       	brne	.+28     	; 0x2d2 <DIO_vwritePin+0xf4>
		{
			CLR_BIT(PORTD,pinNumber);
 2b6:	22 b3       	in	r18, 0x12	; 18
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	ac 01       	movw	r20, r24
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_vwritePin+0xe6>
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_vwritePin+0xe2>
 2c8:	ba 01       	movw	r22, r20
 2ca:	60 95       	com	r22
 2cc:	62 23       	and	r22, r18
 2ce:	62 bb       	out	0x12, r22	; 18
 2d0:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTD,pinNumber);
 2d2:	22 b3       	in	r18, 0x12	; 18
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	ac 01       	movw	r20, r24
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_vwritePin+0x102>
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_vwritePin+0xfe>
 2e4:	ba 01       	movw	r22, r20
 2e6:	62 2b       	or	r22, r18
 2e8:	62 bb       	out	0x12, r22	; 18
 2ea:	08 95       	ret

000002ec <DIO_vtogglePin>:
	}
}

void DIO_vtogglePin(unsigned char portName ,char pinNumber)
{
	switch(portName)
 2ec:	83 34       	cpi	r24, 0x43	; 67
 2ee:	39 f1       	breq	.+78     	; 0x33e <DIO_vtogglePin+0x52>
 2f0:	84 34       	cpi	r24, 0x44	; 68
 2f2:	28 f4       	brcc	.+10     	; 0x2fe <DIO_vtogglePin+0x12>
 2f4:	81 34       	cpi	r24, 0x41	; 65
 2f6:	49 f0       	breq	.+18     	; 0x30a <DIO_vtogglePin+0x1e>
 2f8:	82 34       	cpi	r24, 0x42	; 66
 2fa:	71 f5       	brne	.+92     	; 0x358 <DIO_vtogglePin+0x6c>
 2fc:	13 c0       	rjmp	.+38     	; 0x324 <DIO_vtogglePin+0x38>
 2fe:	82 36       	cpi	r24, 0x62	; 98
 300:	89 f0       	breq	.+34     	; 0x324 <DIO_vtogglePin+0x38>
 302:	83 36       	cpi	r24, 0x63	; 99
 304:	e1 f0       	breq	.+56     	; 0x33e <DIO_vtogglePin+0x52>
 306:	81 36       	cpi	r24, 0x61	; 97
 308:	39 f5       	brne	.+78     	; 0x358 <DIO_vtogglePin+0x6c>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinNumber);
 30a:	2b b3       	in	r18, 0x1b	; 27
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	ac 01       	movw	r20, r24
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_vtogglePin+0x2c>
 314:	44 0f       	add	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_vtogglePin+0x28>
 31c:	ba 01       	movw	r22, r20
 31e:	62 27       	eor	r22, r18
 320:	6b bb       	out	0x1b, r22	; 27
		break;
 322:	08 95       	ret

		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinNumber);
 324:	28 b3       	in	r18, 0x18	; 24
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_vtogglePin+0x46>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_vtogglePin+0x42>
 336:	ba 01       	movw	r22, r20
 338:	62 27       	eor	r22, r18
 33a:	68 bb       	out	0x18, r22	; 24
		break;
 33c:	08 95       	ret

		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinNumber);
 33e:	25 b3       	in	r18, 0x15	; 21
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	ac 01       	movw	r20, r24
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_vtogglePin+0x60>
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_vtogglePin+0x5c>
 350:	ba 01       	movw	r22, r20
 352:	62 27       	eor	r22, r18
 354:	65 bb       	out	0x15, r22	; 21
		break;
 356:	08 95       	ret

		default:
		TOG_BIT(PORTD,pinNumber);
 358:	22 b3       	in	r18, 0x12	; 18
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	ac 01       	movw	r20, r24
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_vtogglePin+0x7a>
 362:	44 0f       	add	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_vtogglePin+0x76>
 36a:	ba 01       	movw	r22, r20
 36c:	62 27       	eor	r22, r18
 36e:	62 bb       	out	0x12, r22	; 18
 370:	08 95       	ret

00000372 <DIO_u8readPin>:
}

unsigned char DIO_u8readPin(unsigned char portName, unsigned char pinNumber)
{
	unsigned char pinValue = 0;
	switch(portName)
 372:	83 34       	cpi	r24, 0x43	; 67
 374:	91 f1       	breq	.+100    	; 0x3da <DIO_u8readPin+0x68>
 376:	84 34       	cpi	r24, 0x44	; 68
 378:	30 f4       	brcc	.+12     	; 0x386 <DIO_u8readPin+0x14>
 37a:	81 34       	cpi	r24, 0x41	; 65
 37c:	51 f0       	breq	.+20     	; 0x392 <DIO_u8readPin+0x20>
 37e:	82 34       	cpi	r24, 0x42	; 66
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_u8readPin+0x12>
 382:	3d c0       	rjmp	.+122    	; 0x3fe <DIO_u8readPin+0x8c>
 384:	18 c0       	rjmp	.+48     	; 0x3b6 <DIO_u8readPin+0x44>
 386:	82 36       	cpi	r24, 0x62	; 98
 388:	b1 f0       	breq	.+44     	; 0x3b6 <DIO_u8readPin+0x44>
 38a:	83 36       	cpi	r24, 0x63	; 99
 38c:	31 f1       	breq	.+76     	; 0x3da <DIO_u8readPin+0x68>
 38e:	81 36       	cpi	r24, 0x61	; 97
 390:	b1 f5       	brne	.+108    	; 0x3fe <DIO_u8readPin+0x8c>
	{
		case 'A':
		case 'a':
		pinValue = READ_BIT(PINA,pinNumber);
 392:	29 b3       	in	r18, 0x19	; 25
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	06 2e       	mov	r0, r22
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_u8readPin+0x2e>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_u8readPin+0x2a>
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	82 23       	and	r24, r18
 3a8:	93 23       	and	r25, r19
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_u8readPin+0x3e>
 3ac:	95 95       	asr	r25
 3ae:	87 95       	ror	r24
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_u8readPin+0x3a>
		break;
 3b4:	08 95       	ret

		case 'B':
		case 'b':
		pinValue = READ_BIT(PINB,pinNumber);
 3b6:	26 b3       	in	r18, 0x16	; 22
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	06 2e       	mov	r0, r22
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8readPin+0x52>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8readPin+0x4e>
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	82 23       	and	r24, r18
 3cc:	93 23       	and	r25, r19
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_u8readPin+0x62>
 3d0:	95 95       	asr	r25
 3d2:	87 95       	ror	r24
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_u8readPin+0x5e>
		break;
 3d8:	08 95       	ret

		case 'C':
		case 'c':
		pinValue = READ_BIT(PINC,pinNumber);
 3da:	23 b3       	in	r18, 0x13	; 19
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	06 2e       	mov	r0, r22
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8readPin+0x76>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8readPin+0x72>
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	82 23       	and	r24, r18
 3f0:	93 23       	and	r25, r19
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8readPin+0x86>
 3f4:	95 95       	asr	r25
 3f6:	87 95       	ror	r24
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8readPin+0x82>
		break;
 3fc:	08 95       	ret

		default:
		pinValue = READ_BIT(PIND,pinNumber);
 3fe:	20 b3       	in	r18, 0x10	; 16
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	06 2e       	mov	r0, r22
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_u8readPin+0x9a>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_u8readPin+0x96>
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	82 23       	and	r24, r18
 414:	93 23       	and	r25, r19
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_u8readPin+0xaa>
 418:	95 95       	asr	r25
 41a:	87 95       	ror	r24
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_u8readPin+0xa6>
		break;
	}	
	return pinValue;
}
 420:	08 95       	ret

00000422 <DIO_vsetPortDirection>:

void DIO_vsetPortDirection(unsigned char portName, unsigned char portDirection)
{
	switch(portName)
 422:	83 34       	cpi	r24, 0x43	; 67
 424:	89 f0       	breq	.+34     	; 0x448 <DIO_vsetPortDirection+0x26>
 426:	84 34       	cpi	r24, 0x44	; 68
 428:	28 f4       	brcc	.+10     	; 0x434 <DIO_vsetPortDirection+0x12>
 42a:	81 34       	cpi	r24, 0x41	; 65
 42c:	49 f0       	breq	.+18     	; 0x440 <DIO_vsetPortDirection+0x1e>
 42e:	82 34       	cpi	r24, 0x42	; 66
 430:	69 f4       	brne	.+26     	; 0x44c <DIO_vsetPortDirection+0x2a>
 432:	08 c0       	rjmp	.+16     	; 0x444 <DIO_vsetPortDirection+0x22>
 434:	82 36       	cpi	r24, 0x62	; 98
 436:	31 f0       	breq	.+12     	; 0x444 <DIO_vsetPortDirection+0x22>
 438:	83 36       	cpi	r24, 0x63	; 99
 43a:	31 f0       	breq	.+12     	; 0x448 <DIO_vsetPortDirection+0x26>
 43c:	81 36       	cpi	r24, 0x61	; 97
 43e:	31 f4       	brne	.+12     	; 0x44c <DIO_vsetPortDirection+0x2a>
	{
		case 'A':
		case 'a':
		DDRA = portDirection;
 440:	6a bb       	out	0x1a, r22	; 26
		break;
 442:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB = portDirection;
 444:	67 bb       	out	0x17, r22	; 23
		break;
 446:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC = portDirection;
 448:	64 bb       	out	0x14, r22	; 20
		break;
 44a:	08 95       	ret
		
		default:
		DDRD = portDirection;
 44c:	61 bb       	out	0x11, r22	; 17
 44e:	08 95       	ret

00000450 <DIO_vwritePort>:
	}	
}

void DIO_vwritePort(unsigned char portName, unsigned char portValue)
{
	switch(portName)
 450:	83 34       	cpi	r24, 0x43	; 67
 452:	89 f0       	breq	.+34     	; 0x476 <DIO_vwritePort+0x26>
 454:	84 34       	cpi	r24, 0x44	; 68
 456:	28 f4       	brcc	.+10     	; 0x462 <DIO_vwritePort+0x12>
 458:	81 34       	cpi	r24, 0x41	; 65
 45a:	49 f0       	breq	.+18     	; 0x46e <DIO_vwritePort+0x1e>
 45c:	82 34       	cpi	r24, 0x42	; 66
 45e:	69 f4       	brne	.+26     	; 0x47a <DIO_vwritePort+0x2a>
 460:	08 c0       	rjmp	.+16     	; 0x472 <DIO_vwritePort+0x22>
 462:	82 36       	cpi	r24, 0x62	; 98
 464:	31 f0       	breq	.+12     	; 0x472 <DIO_vwritePort+0x22>
 466:	83 36       	cpi	r24, 0x63	; 99
 468:	31 f0       	breq	.+12     	; 0x476 <DIO_vwritePort+0x26>
 46a:	81 36       	cpi	r24, 0x61	; 97
 46c:	31 f4       	brne	.+12     	; 0x47a <DIO_vwritePort+0x2a>
	{
		case 'A':
		case 'a':
		PORTA = portValue;
 46e:	6b bb       	out	0x1b, r22	; 27
		break;
 470:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB = portValue;
 472:	68 bb       	out	0x18, r22	; 24
		break;
 474:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC = portValue;
 476:	65 bb       	out	0x15, r22	; 21
		break;
 478:	08 95       	ret
		
		default:
		PORTD = portValue;
 47a:	62 bb       	out	0x12, r22	; 18
 47c:	08 95       	ret

0000047e <DIO_vtogglePort>:
	}
}

void DIO_vtogglePort(unsigned char portName)
{
	switch(portName)
 47e:	83 34       	cpi	r24, 0x43	; 67
 480:	a9 f0       	breq	.+42     	; 0x4ac <DIO_vtogglePort+0x2e>
 482:	84 34       	cpi	r24, 0x44	; 68
 484:	28 f4       	brcc	.+10     	; 0x490 <DIO_vtogglePort+0x12>
 486:	81 34       	cpi	r24, 0x41	; 65
 488:	49 f0       	breq	.+18     	; 0x49c <DIO_vtogglePort+0x1e>
 48a:	82 34       	cpi	r24, 0x42	; 66
 48c:	99 f4       	brne	.+38     	; 0x4b4 <DIO_vtogglePort+0x36>
 48e:	0a c0       	rjmp	.+20     	; 0x4a4 <DIO_vtogglePort+0x26>
 490:	82 36       	cpi	r24, 0x62	; 98
 492:	41 f0       	breq	.+16     	; 0x4a4 <DIO_vtogglePort+0x26>
 494:	83 36       	cpi	r24, 0x63	; 99
 496:	51 f0       	breq	.+20     	; 0x4ac <DIO_vtogglePort+0x2e>
 498:	81 36       	cpi	r24, 0x61	; 97
 49a:	61 f4       	brne	.+24     	; 0x4b4 <DIO_vtogglePort+0x36>
	{
		case 'A':
		case 'a':
		PORTA = ~PORTA;
 49c:	8b b3       	in	r24, 0x1b	; 27
 49e:	80 95       	com	r24
 4a0:	8b bb       	out	0x1b, r24	; 27
		break;
 4a2:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB = ~PORTB;
 4a4:	88 b3       	in	r24, 0x18	; 24
 4a6:	80 95       	com	r24
 4a8:	88 bb       	out	0x18, r24	; 24
		break;
 4aa:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC = ~PORTC;
 4ac:	85 b3       	in	r24, 0x15	; 21
 4ae:	80 95       	com	r24
 4b0:	85 bb       	out	0x15, r24	; 21
		break;
 4b2:	08 95       	ret
		
		default:
		PORTD = ~PORTD;
 4b4:	82 b3       	in	r24, 0x12	; 18
 4b6:	80 95       	com	r24
 4b8:	82 bb       	out	0x12, r24	; 18
 4ba:	08 95       	ret

000004bc <DIO_u8readPort>:
}

unsigned char DIO_u8readPort(unsigned char portName)
{
	unsigned char portValue = 0;
	switch(portName)
 4bc:	83 34       	cpi	r24, 0x43	; 67
 4be:	89 f0       	breq	.+34     	; 0x4e2 <DIO_u8readPort+0x26>
 4c0:	84 34       	cpi	r24, 0x44	; 68
 4c2:	28 f4       	brcc	.+10     	; 0x4ce <DIO_u8readPort+0x12>
 4c4:	81 34       	cpi	r24, 0x41	; 65
 4c6:	49 f0       	breq	.+18     	; 0x4da <DIO_u8readPort+0x1e>
 4c8:	82 34       	cpi	r24, 0x42	; 66
 4ca:	69 f4       	brne	.+26     	; 0x4e6 <DIO_u8readPort+0x2a>
 4cc:	08 c0       	rjmp	.+16     	; 0x4de <DIO_u8readPort+0x22>
 4ce:	82 36       	cpi	r24, 0x62	; 98
 4d0:	31 f0       	breq	.+12     	; 0x4de <DIO_u8readPort+0x22>
 4d2:	83 36       	cpi	r24, 0x63	; 99
 4d4:	31 f0       	breq	.+12     	; 0x4e2 <DIO_u8readPort+0x26>
 4d6:	81 36       	cpi	r24, 0x61	; 97
 4d8:	31 f4       	brne	.+12     	; 0x4e6 <DIO_u8readPort+0x2a>
	{
		case 'A':
		case 'a':
		portValue = PINA;
 4da:	89 b3       	in	r24, 0x19	; 25
		break;
 4dc:	08 95       	ret

		case 'B':
		case 'b':
		portValue = PINB;
 4de:	86 b3       	in	r24, 0x16	; 22
		break;
 4e0:	08 95       	ret

		case 'C':
		case 'c':
		portValue = PINC;
 4e2:	83 b3       	in	r24, 0x13	; 19
		break;
 4e4:	08 95       	ret

		default:
		portValue = PIND;
 4e6:	80 b3       	in	r24, 0x10	; 16
		break;
	}
	return portValue;	
 4e8:	08 95       	ret

000004ea <LED_vInit>:

#include "DIO.h"

void LED_vInit(unsigned char portName,unsigned char pinNumber)
{
	DIO_vsetPinDirection(portName,pinNumber,1);//Set  the given pin in the given port as an output
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPinDirection>
}
 4f0:	08 95       	ret

000004f2 <LED_vTurnOn>:

void LED_vTurnOn(unsigned char portName,unsigned char pinNumber)
{
	DIO_vwritePin(portName,pinNumber,1);//Set the given pin in the given port to one(on)
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_vwritePin>
}
 4f8:	08 95       	ret

000004fa <LED_vTurnOff>:

void LED_vTurnOff(unsigned char portName,unsigned char pinNumber)
{
	DIO_vwritePin(portName,pinNumber,0);//Set the given pin in the given port to zero(off)
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_vwritePin>
}
 500:	08 95       	ret

00000502 <LED_vToggle>:

void LED_vToggle(unsigned char portName,unsigned char pinNumber)
{
	DIO_vtogglePin(portName,pinNumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 502:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_vtogglePin>
}
 506:	08 95       	ret

00000508 <LED_u8readStatus>:

unsigned char LED_u8readStatus(unsigned char portName,unsigned char pinNumber)
{
	return DIO_u8readPin(portName,pinNumber);
 508:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_u8readPin>
}
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
